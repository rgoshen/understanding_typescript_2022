TypeScript provides many types to JavaScript.
Now JavaScript itself also knows some data types, and I'll come back to that in this module as well.
But TypeScript adds many more types.
And as you will also learn in this course, TypeScript also enables you to write your own types.
Now let's start with some of the core types which JavaScript already knows and which TypeScript also
supports.
And we'll also have a look at what the difference between JavaScript knowing the type and TypeScript
using that type means.
One of the core types we work with in JavaScript and TypeScript is the number type now in JavaScript.
And the same is true for TypeScript.
There is only one number type.
There is no special type for integers or floats.
Instead, these values here would all be numbers.
One would be a number without a decimal place.
5.3 obviously is one with the decimal place and all these values are of type number.
Our programming languages have special integer types and float or double types.
JavaScript doesn't have it and TypeScript doesn't have it either.
So we have the number type which we know from JavaScript.
Also as a type in TypeScript, we also have the string data type and that would be text which you can
define in one of these three ways with single quotes, with double quotes, or also with back ticks.
The last notation with back ticks is a special syntax provided in modern JavaScript and also in TypeScript,
which allows us to write so called template literals that are normal strings where you can dynamically
inject some data into them.
So strings are simply text and JavaScript knows about string value types.
TypeScript does so as well.
Last, but at least one of the core data types JavaScript nodes and TypeScript also supports is the
Boolean data type that would be true or false, and that's super important in programming, obviously,
especially when working with if statements here we get these two values.
And that's important because in JavaScript you also might know this idea of truth and false values.
For example, that zero, the number zero is a false value if you use it in a if condition, it is treated
as false.
The Boolean data type really just knows these two values though true or false.
And that's not just the case for TypeScript, but also for JavaScript.
This true three false concept which you should know that is not related to data types that some behind
the scenes work JavaScript does at runtime when it sees certain values and if conditions.
So with numbers, strings and booleans, we get a couple of core data types.
Of course not all we got objects and so on as well, but let's focus on these types and see what TypeScript
does with them or what we can do with them.
With the help of TypeScript for this, I'm back to the project we saw in the first course module and
there I showed you that all you need to do now is run NPM, start in a terminal, navigated into this
project folder to spin up this live development server which will reload whenever we change something.
And here I opened up this localhost 3000 address in a new tab of my browser.
Right now I'm getting an error because I have no app trace file yet.
Of course you find this starting project also attached to this lecture.
We'll get such an app JS file which we're trying to import here in our index HTML file as soon as we
compile apps from TypeScript to JavaScript.
And we can do that in a new tab of the terminal so that we keep this process running and open a new
tab and start by simply running.
TSC apts.
And what this does is it compiles the typescript file and spits out a JavaScript file.
And once that happens, we can reload this page and we get the time to get started output here.
So now we have this setup here where we can write some typescript code and then compile it to JavaScript
code to see what it does.
Now with that in the TypeScript file, I'll actually get rid of the content there because now I want
to dive into these core data types which I just showed you on the slide so that you understand how to
work with them in TypeScript.
Now let's start very, very simple.
Let's say we have a new function add and there we expect two numbers and one and add two and I return
and one plus and two, just like that very simple function.
Nothing typescript about it.
Now we have two numbers with which we want to work.
That could be number one here, which is say five and also number.
Two, which is maybe 2.8, whatever you want two numbers here now, obviously, and not very surprisingly,
we can add or call the add function and pass in number one.
And number two, as arguments to this function store to result in a new constant maybe and then to see
something on the screen, we can console lock the result.
If we do that and I recompile this file with tsk apts, then this page should automatically reload already.
If not, you can manually reload of course, and you should see 7.8.
Now you might think that's not too special, right?
This is a pretty straightforward JavaScript snippet and indeed there is nothing TypeScript ish about
it.
Well, let's do something which will break that snippet in normal JavaScript.
Let's say this input here is actually not a number, but some text, a five in text.
And if we now save that and rerun our compilation command here.
You'll see that once this page reloads here, I get 52.8 as output, and that's obviously not the correct
result of this addition.
Now, do you know why we're getting this output in normal JavaScript, which we in the end are executing
here?
Well, we're getting this output because this is not the result of the mathematical addition, but instead
this concatenate this as a string because this input here five is a string and then JavaScript sees,
okay, I got a string, I'm adding something to the string.
Well certainly does.
Something should also be converted to a string so that overall I got a string because the first value
was a string and hence what JavaScript does is it converts 2.8 from a number to a string, concatenate
a longer string from five and 2.8, hence yielding 52.8 as a string and returns that.
So it's not treating this in a mathematical way, but instead as a string and with JavaScript, this
can happen.
Now of course you might think, why would I write such code?
I am the developer.
Why would I make this mistake?
Well, maybe you're not the one making this mistake.
Maybe this is getting fetched from some user input and you introduce a little bug in your code where
you forgot to transform this, or you're working in a team and you're having a couple of script files
working together and some other developer introduced such an error.
It's not impossible to make such errors, but it can be hard to track them down here.
Of course, it's pretty obvious that something went wrong because we have a basic script, but in a
bigger script you might not even immediately recognize that something went wrong here.
And that's where TypeScript can help us.
We can add type assignments in this function to our parameters.
We can tell TypeScript that these two parameters should be of type number and not be of type.
I don't care which is the default.
So we do that by adding a colon here after the value to which we want to assign a type.
So in this case, after the parameter name and then the name of the type, for example number would
be one of the supported names.
Besides number, you always got string or boolean, but we'll come back to those for the moment.
We need number and we don't just need it on the first parameter here, but also on the second one.
So here also we can add a colon and then number.
And now what we're saying to TypeScript is, hey, both parameters here should be of type number.
Passing in values of a different type is not allowed.
And indeed my ID already complains here because visual code has built in TypeScript support.
But even if we would overlook this as soon as I recompile this by rerunning tsk apts.
You'll see.
We get an error.
We get an error.
That argument of type string five is not assignable to parameter of type number.
And it even shows us where this happened and gives us the line number, line eight, and it's basically
showing us the same the it shows here.
So in case we overlooked it in the ID, compiling it now throws an error.
And that's the important thing about TypeScript.
It only helps us during compilation.
It doesn't change JavaScript to work differently at runtime because browsers have no built in TypeScript
support.
It can only help us during development before we compile our TypeScript code to JavaScript.
But there it's extremely useful because it adds an extra step and extra sanity check.
Where?
Here we find out.
Oh, we made a mistake here.
This shouldn't be a string, this should be a number.
We can fix this and we're good.
This is what TypeScript does.
It helps you during development.
It does not change your runtime code.
Indeed, here, even with the default settings, it compiled our error here, even though it detected
it during compilation and created a file which causes the incorrect result.
Because by default TypeScript does not step in here.
Later you'll learn how you can make sure that it does, but by default it doesn't even block compilation.
Still, it yells at you and points at this mistake.
So that you can fix it and so that you can avoid such mistakes here.
By the way, make sure you don't have apks and app tabs open at the same time.
You could get errors here in the IDE regarding duplicate function implementations.
Closing the JavaScript file fixes this.